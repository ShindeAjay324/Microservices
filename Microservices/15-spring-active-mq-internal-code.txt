ActiveMQ
========

1st Party	Sun / Oracle - JMS API	[javax.jms package]

3rd Party	Apache  - ActiveMQ 5.x API [org.apache.activemq package]

2nd Party      Programmer - Application

*) Set of interfaces (and few classes) are given by Sun/Oracle for Message Queues using JMS API [Java Message Service]
	Ex Interface names: Session, Message

*) For these interfaces Implementation is given by Apache vendor with API name : ActiveMQ 5.x
	Ex Impl class names: ActiveMQSession, ActiveMQTextMessage

*) Spring boot JMS has given one functional interface

MessageCreator(I)
   createMessage(Session) : Message

Above interface contains one method createMessage() that takes Session as input and return Message as output.

*) So, we can just call above session and pass data using createMessage() with method createTextMessage().


Code
====
package org.springframework.jms.core;

@FunctionalInterface
interface MessageCreator
{
	Message createMessage(Session session) throws JMSException;	
}
===================================================
Internal code used during development for binding the body for createMessage

package jakarta.jms;
interface Session{
	TextMessage createTextMessage(String text) throws JMSException;
}

package org.apache.activemq;
import jakarta.jms.TextMessage;
public class ActiveMQSession implements Session{
	public TextMessage createTextMessage(String text) throws JMSException {

      			ActiveMQTextMessage message = new ActiveMQTextMessage();
      			message.setText(text);
      			this.configureMessage(message);
      			return message;

	}
}

======================================================
package jakarta.jms;
interface Message
{

}
interface TextMessage extends Message
{

}

package org.apache.activemq;
public class ActiveMQTextMessage extends ActiveMQMessage implements TextMessage{
	
	public void setText(String text) throws MessageNotWriteableException {
      			this.checkReadOnlyBody();
      			this.text = text;
      			this.setContent((ByteSequence)null);
  	}
}


















